# -*- coding: utf-8 -*-
"""lamfun.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NdPQigGdnbKeGXWxGDnaRLwMGwnQp0XV
"""

import boto3
import json
import datetime
from botocore.exceptions import ClientError
from guardrail_config import create_guardrail  # Import the guardrail creation function

bedrock_client = boto3.client('bedrock-runtime')

def lambda_handler(event, context):
    try:
        # Get the guardrail ID by calling the imported function
        guardrail_response = create_guardrail()
        guardrail_id = guardrail_response['guardrailId']

        subject = "Meeting Update"
        email_body = "Please confirm your availability for the team meeting tomorrow."
        prompt = f"Generate a professional response for the following:\nSubject: {subject}\nEmail Body: {email_body}"

        payload = {
            "modelId": "anthropic.claude-3-5-sonnet-20240620-v1:0",
            "contentType": "application/json",
            "accept": "application/json",
            "body": {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 512,
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": prompt
                            }
                        ]
                    }
                ]
            }
        }

        # Convert the payload to bytes
        body_bytes = json.dumps(payload['body']).encode('utf-8')

        # Invoke the model with the guardrail
        response = bedrock_client.invoke_model(
            body=body_bytes,
            contentType=payload['contentType'],
            accept=payload['accept'],
            modelId=payload['modelId'],
            guardrailIdentifier=guardrail_id,
            guardrailVersion="2",
            trace="ENABLED"
        )

        # Read and decode the response
        response_body = response['body'].read().decode('utf-8')
        model_response = json.loads(response_body)

        # Format the response
        today_date = datetime.date.today().isoformat()
        output_data = {
            "Date": today_date,
            "MessageID": context.aws_request_id if context else "test-message-id",
            "Body": model_response
        }

        return {
            "statusCode": 200,
            "body": json.dumps(output_data, indent=2)
        }

    except ClientError as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }